package me.az1.dblab.Common;


/**
* me/az1/dblab/Common/_DatabaseControllerCorbaStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/main/java/me/az1/dblab/Common/DatabaseControllerCorba.idl
* Thursday, December 4, 2014 5:40:32 PM EET
*/

public class _DatabaseControllerCorbaStub extends org.omg.CORBA.portable.ObjectImpl implements me.az1.dblab.Common.DatabaseControllerCorba
{

  public boolean IsOpened ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("IsOpened", true);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return IsOpened (        );
            } finally {
                _releaseReply ($in);
            }
  } // IsOpened

  public void NewDatabase ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("NewDatabase", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                NewDatabase (        );
            } finally {
                _releaseReply ($in);
            }
  } // NewDatabase

  public void LoadDatabase (String path)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("LoadDatabase", true);
                $out.write_string (path);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                LoadDatabase (path        );
            } finally {
                _releaseReply ($in);
            }
  } // LoadDatabase

  public void SaveDatabase (String path)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("SaveDatabase", true);
                $out.write_string (path);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                SaveDatabase (path        );
            } finally {
                _releaseReply ($in);
            }
  } // SaveDatabase

  public void CloseDatabase ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("CloseDatabase", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                CloseDatabase (        );
            } finally {
                _releaseReply ($in);
            }
  } // CloseDatabase

  public int[][] DatabaseGetTableVersions ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseGetTableVersions", true);
                $in = _invoke ($out);
                int $result[][] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64arrHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseGetTableVersions (        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseGetTableVersions

  public int[] DatabaseAddEmptyTable (String scheme, String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseAddEmptyTable", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.SchemeHelper.write ($out, scheme);
                $out.write_string (name);
                $in = _invoke ($out);
                int $result[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseAddEmptyTable (scheme, name        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseAddEmptyTable

  public boolean DatabaseRemoveTable (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseRemoveTable", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseRemoveTable (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseRemoveTable

  public int[][] DatabaseGetTableRowVersions (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseGetTableRowVersions", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                int $result[][] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64arrHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseGetTableRowVersions (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseGetTableRowVersions

  public int DatabaseSize ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseSize", true);
                $in = _invoke ($out);
                int $result = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseSize (        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseSize

  public int DatabaseTableSize (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableSize", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                int $result = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableSize (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableSize

  public String DatabaseTableName (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableName", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableName (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableName

  public int DatabaseTableRowLength (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableRowLength", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                int $result = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableRowLength (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableRowLength

  public int[] DatabaseTableAddEmptyRow (int[] version)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableAddEmptyRow", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, version);
                $in = _invoke ($out);
                int $result[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableAddEmptyRow (version        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableAddEmptyRow

  public boolean DatabaseTableRemoveRow (int[] tableVersion, int[] rowVersion)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableRemoveRow", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, rowVersion);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableRemoveRow (tableVersion, rowVersion        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableRemoveRow

  public byte[] DatabaseTableGetField (int[] tableVersion, int[] rowVersion, int column)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableGetField", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, rowVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.write ($out, column);
                $in = _invoke ($out);
                byte $result[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int8arrHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableGetField (tableVersion, rowVersion, column        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableGetField

  public String DatabaseTableGetFieldString (int[] tableVersion, int[] rowVersion, int column)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableGetFieldString", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, rowVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.write ($out, column);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableGetFieldString (tableVersion, rowVersion, column        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableGetFieldString

  public void DatabaseTableSetFieldData (int[] tableVersion, int[] rowVersion, int column, byte[] value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableSetFieldData", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, rowVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.write ($out, column);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int8arrHelper.write ($out, value);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                DatabaseTableSetFieldData (tableVersion, rowVersion, column, value        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableSetFieldData

  public void DatabaseTableSetFieldString (int[] tableVersion, int[] rowVersion, int column, String strValue)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableSetFieldString", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, rowVersion);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.write ($out, column);
                $out.write_string (strValue);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                DatabaseTableSetFieldString (tableVersion, rowVersion, column, strValue        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableSetFieldString

  public int[] DatabaseTableFind (int[] tableVersion, String pattern)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableFind", true);
                me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
                $out.write_string (pattern);
                $in = _invoke ($out);
                int $result[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DatabaseTableFind (tableVersion, pattern        );
            } finally {
                _releaseReply ($in);
            }
  } // DatabaseTableFind

    public int[] DatabaseTableRemoveDuplicates (int[] tableVersion)
    {
        String pattern = ".*|.*";
        org.omg.CORBA.portable.InputStream $in = null;
        try {
            org.omg.CORBA.portable.OutputStream $out = _request ("DatabaseTableFind", true);
            me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write ($out, tableVersion);
            $out.write_string (pattern);
            $in = _invoke ($out);
            int $result[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read ($in);
            return $result;
        } catch (org.omg.CORBA.portable.ApplicationException $ex) {
            $in = $ex.getInputStream ();
            String _id = $ex.getId ();
            throw new org.omg.CORBA.MARSHAL (_id);
        } catch (org.omg.CORBA.portable.RemarshalException $rm) {
            return DatabaseTableRemoveDuplicates(tableVersion);
        } finally {
            _releaseReply ($in);
        }
    } // DatabaseTableFind

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:me/az1/dblab/Common/DatabaseControllerCorba:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DatabaseControllerCorbaStub
