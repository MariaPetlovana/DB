package me.az1.dblab.Common;


/**
* me/az1/dblab/Common/DatabaseControllerCorbaPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/main/java/me/az1/dblab/Common/DatabaseControllerCorba.idl
* Thursday, December 4, 2014 5:40:32 PM EET
*/

public abstract class DatabaseControllerCorbaPOA extends org.omg.PortableServer.Servant
 implements me.az1.dblab.Common.DatabaseControllerCorbaOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("IsOpened", new java.lang.Integer (0));
    _methods.put ("NewDatabase", new java.lang.Integer (1));
    _methods.put ("LoadDatabase", new java.lang.Integer (2));
    _methods.put ("SaveDatabase", new java.lang.Integer (3));
    _methods.put ("CloseDatabase", new java.lang.Integer (4));
    _methods.put ("DatabaseGetTableVersions", new java.lang.Integer (5));
    _methods.put ("DatabaseAddEmptyTable", new java.lang.Integer (6));
    _methods.put ("DatabaseRemoveTable", new java.lang.Integer (7));
    _methods.put ("DatabaseGetTableRowVersions", new java.lang.Integer (8));
    _methods.put ("DatabaseSize", new java.lang.Integer (9));
    _methods.put ("DatabaseTableSize", new java.lang.Integer (10));
    _methods.put ("DatabaseTableName", new java.lang.Integer (11));
    _methods.put ("DatabaseTableRowLength", new java.lang.Integer (12));
    _methods.put ("DatabaseTableAddEmptyRow", new java.lang.Integer (13));
    _methods.put ("DatabaseTableRemoveRow", new java.lang.Integer (14));
    _methods.put ("DatabaseTableGetField", new java.lang.Integer (15));
    _methods.put ("DatabaseTableGetFieldString", new java.lang.Integer (16));
    _methods.put ("DatabaseTableSetFieldData", new java.lang.Integer (17));
    _methods.put ("DatabaseTableSetFieldString", new java.lang.Integer (18));
    _methods.put ("DatabaseTableFind", new java.lang.Integer (19));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // me/az1/dblab/Common/DatabaseControllerCorba/IsOpened
       {
         boolean $result = false;
         $result = this.IsOpened ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // me/az1/dblab/Common/DatabaseControllerCorba/NewDatabase
       {
         this.NewDatabase ();
         out = $rh.createReply();
         break;
       }

       case 2:  // me/az1/dblab/Common/DatabaseControllerCorba/LoadDatabase
       {
         String path = in.read_string ();
         this.LoadDatabase (path);
         out = $rh.createReply();
         break;
       }

       case 3:  // me/az1/dblab/Common/DatabaseControllerCorba/SaveDatabase
       {
         String path = in.read_string ();
         this.SaveDatabase (path);
         out = $rh.createReply();
         break;
       }

       case 4:  // me/az1/dblab/Common/DatabaseControllerCorba/CloseDatabase
       {
         this.CloseDatabase ();
         out = $rh.createReply();
         break;
       }

       case 5:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseGetTableVersions
       {
         int $result[][] = null;
         $result = this.DatabaseGetTableVersions ();
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64arrHelper.write (out, $result);
         break;
       }

       case 6:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseAddEmptyTable
       {
         String scheme = me.az1.dblab.Common.DatabaseControllerCorbaPackage.SchemeHelper.read (in);
         String name = in.read_string ();
         int $result[] = null;
         $result = this.DatabaseAddEmptyTable (scheme, name);
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write (out, $result);
         break;
       }

       case 7:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseRemoveTable
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         boolean $result = false;
         $result = this.DatabaseRemoveTable (version);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseGetTableRowVersions
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int $result[][] = null;
         $result = this.DatabaseGetTableRowVersions (version);
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64arrHelper.write (out, $result);
         break;
       }

       case 9:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseSize
       {
         int $result = (int)0;
         $result = this.DatabaseSize ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 10:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableSize
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int $result = (int)0;
         $result = this.DatabaseTableSize (version);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 11:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableName
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         String $result = null;
         $result = this.DatabaseTableName (version);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 12:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableRowLength
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int $result = (int)0;
         $result = this.DatabaseTableRowLength (version);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 13:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableAddEmptyRow
       {
         int version[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int $result[] = null;
         $result = this.DatabaseTableAddEmptyRow (version);
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write (out, $result);
         break;
       }

       case 14:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableRemoveRow
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int rowVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         boolean $result = false;
         $result = this.DatabaseTableRemoveRow (tableVersion, rowVersion);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 15:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableGetField
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int rowVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int column = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read (in);
         byte $result[] = null;
         $result = this.DatabaseTableGetField (tableVersion, rowVersion, column);
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int8arrHelper.write (out, $result);
         break;
       }

       case 16:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableGetFieldString
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int rowVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int column = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read (in);
         String $result = null;
         $result = this.DatabaseTableGetFieldString (tableVersion, rowVersion, column);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 17:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableSetFieldData
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int rowVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int column = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read (in);
         byte value[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int8arrHelper.read (in);
         this.DatabaseTableSetFieldData (tableVersion, rowVersion, column, value);
         out = $rh.createReply();
         break;
       }

       case 18:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableSetFieldString
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int rowVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         int column = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int32Helper.read (in);
         String strValue = in.read_string ();
         this.DatabaseTableSetFieldString (tableVersion, rowVersion, column, strValue);
         out = $rh.createReply();
         break;
       }

       case 19:  // me/az1/dblab/Common/DatabaseControllerCorba/DatabaseTableFind
       {
         int tableVersion[] = me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.read (in);
         String pattern = in.read_string ();
         int $result[] = null;
         $result = this.DatabaseTableFind (tableVersion, pattern);
         out = $rh.createReply();
         me.az1.dblab.Common.DatabaseControllerCorbaPackage.int64Helper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:me/az1/dblab/Common/DatabaseControllerCorba:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DatabaseControllerCorba _this() 
  {
    return DatabaseControllerCorbaHelper.narrow(
    super._this_object());
  }

  public DatabaseControllerCorba _this(org.omg.CORBA.ORB orb) 
  {
    return DatabaseControllerCorbaHelper.narrow(
    super._this_object(orb));
  }


} // class DatabaseControllerCorbaPOA
